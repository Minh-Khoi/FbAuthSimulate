/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.authservice.api;

import com.example.authservice.model.AuthTokens;
import com.example.authservice.model.RefreshTokenRequest;
import com.example.authservice.model.UserCredentials;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-05T06:06:26.263727499Z[Etc/UTC]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Auth", description = "Operations for user authentication (login, logout, token refresh).")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/login : Log in a user
     * Authenticates a user and returns a JWT access token and a refresh token.
     *
     * @param userCredentials User login credentials (required)
     * @return Successful authentication (status code 200)
     *         or Unauthorized (invalid credentials) (status code 401)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Log in a user",
        description = "Authenticates a user and returns a JWT access token and a refresh token.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful authentication", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthTokens.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized (invalid credentials)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthTokens> loginUser(
        @Parameter(name = "UserCredentials", description = "User login credentials", required = true) @Valid @RequestBody UserCredentials userCredentials
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\", \"refreshToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/refresh : Refresh an access token
     * Uses a refresh token to issue a new access token.
     *
     * @param refreshTokenRequest The refresh token to use. (required)
     * @return New tokens generated successfully (status code 200)
     *         or Unauthorized (invalid or expired refresh token) (status code 401)
     */
    @Operation(
        operationId = "refreshToken",
        summary = "Refresh an access token",
        description = "Uses a refresh token to issue a new access token.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "New tokens generated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthTokens.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized (invalid or expired refresh token)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/refresh",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthTokens> refreshToken(
        @Parameter(name = "RefreshTokenRequest", description = "The refresh token to use.", required = true) @Valid @RequestBody RefreshTokenRequest refreshTokenRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\", \"refreshToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
