/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.authservice.api;

import com.example.authservice.model.UserCredentials;
import com.example.authservice.model.UserProfile;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-05T06:06:26.263727499Z[Etc/UTC]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Users", description = "Operations for user management (registration, profile).")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users/me : Get current user&#39;s profile
     * Fetches the profile of the currently authenticated user.
     *
     * @return Successful retrieval of user profile (status code 200)
     *         or Unauthorized (missing or invalid token) (status code 401)
     */
    @Operation(
        operationId = "getMyProfile",
        summary = "Get current user's profile",
        description = "Fetches the profile of the currently authenticated user.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful retrieval of user profile", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfile.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized (missing or invalid token)")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/me",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserProfile> getMyProfile(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"John Doe\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"user@example.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/register : Register a new user
     * Creates a new user account with the provided credentials.
     *
     * @param userCredentials User registration details (required)
     * @return User created successfully (status code 201)
     *         or Invalid input (e.g., missing fields, invalid email) (status code 400)
     *         or User with this email already exists (status code 409)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Register a new user",
        description = "Creates a new user account with the provided credentials.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfile.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input (e.g., missing fields, invalid email)"),
            @ApiResponse(responseCode = "409", description = "User with this email already exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserProfile> registerUser(
        @Parameter(name = "UserCredentials", description = "User registration details", required = true) @Valid @RequestBody UserCredentials userCredentials
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"John Doe\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"user@example.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
